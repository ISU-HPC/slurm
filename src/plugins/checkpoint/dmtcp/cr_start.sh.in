#!/bin/sh

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $DIR/cr_common.sh

#########GENERAL INFORMATION
#SLURM_CHECKPOINT_IMAGE_DIR: path where slurm stores checkpoint images, as defined in slurm.conf . It contains many checkpoint_folder and some other stuff
#SLURM_JOB_ID: the Id of the slurm job. Note that in this script it exists as environment var, but in other ones it comes as an input variable
#checkpoint_folder: folder where we want to store the checkpoint information.
#checkpoint_library: library employed to perform a given chekcpoint
#checkpoint_info: file containing checkpoint information during its execution. It is also employed for concurency
#   in case of DMTCP, port and host. It is stored in  SLURM_CHECKPOINT_IMAGE_DIR
#  this file is called SLURM_CHECKPOINT_IMAGE_DIR/checkpoint_info.$SLURM_JOB_ID
#


#############################################
##############################################
####  START JOB WITH CHECKPOINT SUPPORT ######

startDMTCPCheckpointedJob(){

 grep -E '^[ ]*(mpirun|srun|mpiexec)' $1 > /dev/null 2>&1
 if [ $? -ne 0 ]; then
   APP_TYPE="SERIAL"
 else
   APP_TYPE="MPI"
 fi

  startDMTCPCoordinator $checkpoint_folder $checkpoint_info $APP_TYPE
  source $checkpoint_info

  export DMTCP_CHECKPOINT_DIR=$checkpoint_folder

  grep -E '^[ ]*(mpirun|srun|mpiexec)' $1 > /dev/null 2>&1

  #Serial application
  if [ $? -ne 0 ]; then
    @DMTCP_HOME@/dmtcp_launch --ib --rm $@
  #MPI application
  else
    #Permision fix
    chmod 700 $1
    tmpFile=$SLURM_CHECKPOINT_IMAGE_DIR/tmp.sh.$SLURM_JOB_ID

    grep -e 'mpirun \+-' -e 'mpiexec \+-' -e 'srun \+-' $1 > /dev/null 2>&1 && \
      echo "Currently no options to mpirun/mpiexec/srun are supported,
    please use environment variables instead."
    grep -e 'mpirun \+-' -e 'mpiexec \+-' -e 'srun \+-' $1 > /dev/null 2>&1 && exit 1

	#note that sed uses ! as separator because DMTCP_HOME contains "/"
    sed -E 's!^[ ]*(mpirun|srun|mpiexec)!srun @DMTCP_HOME@/dmtcp_launch --ib --rm!g' $1 >  $tmpFile
    cat $tmpFile > $1
    rm $tmpFile
    $@
  fi

  return $?
}


#############################################
##############################################
####  MAIN: we start here ######

#only input parameter: script to be executed

#here we will store information about checkpoint
checkpoint_info=$SLURM_CHECKPOINT_IMAGE_DIR"/checkpoint_info."$SLURM_JOB_ID
checkpoint_folder=$SLURM_CHECKPOINT_IMAGE_DIR"/"$SLURM_JOB_ID

#see who is the first task
if ! semaphore $SLURM_CHECKPOINT_IMAGE_DIR $SLURM_JOB_ID;
then
  #this is not the first task
  exit 0
fi
#clean concurrency file at the end of execution
trap 'rm -rf $checkpoint_info' SIGHUP SIGINT SIGTERM EXIT

#scancel (and svacate) first send SIGTERM, and if jobs have not terminated send a SIGKILL
#in this case we want to cancel the execution of this script, so checkpoint files are not deleted
trap 'exit 0' SIGTERM SIGKILL

#start job with DMTCP support
startDMTCPCheckpointedJob $@

#remove files after execution, if job was NOT cancelled.
#note that if job was cancelled, these files do not exist
rm -rf $checkpoint_folder
rm -f $SLURM_CHECKPOINT_IMAGE_DIR/$SLURM_JOB_ID".ckpt"
exit 0
